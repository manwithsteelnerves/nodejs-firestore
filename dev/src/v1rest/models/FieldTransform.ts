/* eslint-disable prettier/prettier */
/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/no-unused-vars
import * as models from './index';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import * as helpers from '../helpers';

/**
 * A transformation of a field of the document.
 */
export class FieldTransform {
  /**
   * Append the given elements in order if they are not already present in the current field value. If the field is not an array, or if the field does not yet exist, it is first set to the empty array. Equivalent numbers of different types (e.g. 3L and 3.0) are considered equal when checking if a value is missing. NaN is equal to NaN, and Null is equal to Null. If the input contains multiple equivalent values, only the first will be considered. The corresponding transform_result will be the null value.
   */
  appendMissingElements?: models.ArrayValue;
  /**
   * The path of the field. See Document.fields for the field path syntax reference.
   */
  fieldPath?: string | null;
  /**
   * Adds the given value to the field's current value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the given value. If either of the given value or the current field value are doubles, both values will be interpreted as doubles. Double arithmetic and representation of double values follow IEEE 754 semantics. If there is positive/negative integer overflow, the field is resolved to the largest magnitude positive/negative integer.
   */
  increment?: models.Value;
  /**
   * Sets the field to the maximum of its current value and the given value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the given value. If a maximum operation is applied where the field and the input value are of mixed types (that is - one is an integer and one is a double) the field takes on the type of the larger operand. If the operands are equivalent (e.g. 3 and 3.0), the field does not change. 0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and zero input value is always the stored value. The maximum of any numeric value x and NaN is NaN.
   */
  maximum?: models.Value;
  /**
   * Sets the field to the minimum of its current value and the given value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the input value. If a minimum operation is applied where the field and the input value are of mixed types (that is - one is an integer and one is a double) the field takes on the type of the smaller operand. If the operands are equivalent (e.g. 3 and 3.0), the field does not change. 0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and zero input value is always the stored value. The minimum of any numeric value x and NaN is NaN.
   */
  minimum?: models.Value;
  /**
   * Remove all of the given elements from the array in the field. If the field is not an array, or if the field does not yet exist, it is set to the empty array. Equivalent numbers of the different types (e.g. 3L and 3.0) are considered equal when deciding whether an element should be removed. NaN is equal to NaN, and Null is equal to Null. This will remove all equivalent values if there are duplicates. The corresponding transform_result will be the null value.
   */
  removeAllFromArray?: models.ArrayValue;
  /**
   * Sets the field to the given server value.
   */
  setToServerValue?: FieldTransform.SetToServerValueEnum;

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  constructor(json: any) {
    if (json.appendMissingElements) {
      this.appendMissingElements = new models.ArrayValue(json.appendMissingElements);
    }
    if (json.fieldPath) {
      this.fieldPath = json.fieldPath; //[Data format: ]
    }
    if (json.increment) {
      this.increment = new models.Value(json.increment);
    }
    if (json.maximum) {
      this.maximum = new models.Value(json.maximum);
    }
    if (json.minimum) {
      this.minimum = new models.Value(json.minimum);
    }
    if (json.removeAllFromArray) {
      this.removeAllFromArray = new models.ArrayValue(json.removeAllFromArray);
    }
    if (json.setToServerValue) {
      this.setToServerValue = json.setToServerValue; //[Data format: ]
    }
  }
}
// eslint-disable-next-line @typescript-eslint/no-namespace
export namespace FieldTransform {
  export type SetToServerValueEnum =  'SERVER_VALUE_UNSPECIFIED'|'REQUEST_TIME';
}
